import os

# DEFINE CONFIG FILE FOR SNAKEMAKE:
configfile: "config.json"

# DEFINE CONTEXT-VARIABLES:
finalExtensions=['frq.strat', 'fst', 'imiss', 'ld', 'missing.hap', 'hwe', 'het', 'ibc']
locations=list(config['locations'].keys())
samples=list(config['samples'].keys())
superPop=set(config['clusters']['SUPER'])
subPop=set(config['clusters']['SUB'])
bExtensions=["bed", "bim", "fam"]
tExtensions=["map", "ped"]


# BEGIN DEFINING RULES:
rule all:
    """
    Catch-all rule to trigger auto-run of all processes. This process will be fired automatically in absence of explicit process name given by cli-argument.
    """
    input:
        expand("Final/SUB/ALL_{location}_SUB.{extension}", extension=finalExtensions, location=locations),
        expand("Final/SUPER/ALL_{location}_SUPER.{extension}", extension=finalExtensions, location=locations)


rule LIFTOVER:
    """
    Lift Variants onto same Reference build. Otherwise we cant merge them or analyse them in context of eachother.
    """
    input:
        expand("rawData/{{sample}}.{extension}", extension=tExtensions)

    output:
        expand("Intermediates/COLLATE/{{sample}}.{extension}", extension=bExtensions)

    params:
        prefix=lambda wildcards: f"Intermediates/LIFTOVER/{wildcards.sample}_LIFTED",
        exclusionList=lambda wildcards: f"Intermediates/LIFTOVER/{wildcards.sample}_EXCLUDE.dat",
        chainFile="Binaries/hg19ToHg38.over.chain",
        LiftOver="Binaries/liftOverPlink.py",
        rmBadLifts="Binaries/rmBadLifts.py",
        sexes="rawData/1000g.sexes"

    resources:
        cpus=14,
        nodes=1,
        queue="normal",
        walltime="30:00:00"

    run:
        shell("echo 'Determining Liftover requirements now...'")
        if config['samples'][wildcards.sample]['refGenome'] != "GRCh38":
            shell("echo 'Liftover required. All datasets have been mapped to {}'".format(config['samples'][wildcards.sample]['refGenome'])),
            shell("module load liftover"),
            if config['samples'][wildcards.sample]['refGenome'] == "GRCh37" or config['samples'][wildcards.sample]['refGenome'] == "Hg19":
                shell("echo 'Lifting from GRCh37 to GRCh38.'"),
                if not os.path.exists('Intermediates/LIFTOVER'):
                    os.makedirs('Intermediates/LIFTOVER')
                shell("module load liftover; python {params.LiftOver} -e liftover -m rawData/{wildcards.sample}.map -p rawData/{wildcards.sample}.ped -o {params.prefix} -c {params.chainFile}"),
                shell("echo 'liftOver complete.'"),
                shell("cut -f 4 {params.prefix}.unlifted | sed '/^#/d' >> {params.exclusionList}"),
                shell("echo 'Exclusion list generated'")
                shell("module load plink-1.9; plink --map {params.prefix}.map --ped {params.prefix}.ped --allow-extra-chr --make-bed --keep-allele-order --out {params.prefix}"),
                shell("module load plink-2; plink2 --bfile {params.prefix} --set-all-var-ids @:#\$r-\$a --allow-extra-chr --new-id-max-allele-len 40 truncate --chr 1-22 --out Intermediates/COLLATE/{wildcards.sample} --make-bed --keep-allele-order --exclude Intermediates/LIFTOVER/{wildcards.sample}_EXCLUDE.dat")
        # ToDo: Add conditionals for other human reference genome builds
        else:
            print("No liftover required. Dataset {} is already mapped to GRCh38.".format(wildcards.sample)),
            shell("cp rawData/{wildcards.sample}.map Intermediates/COLLATE/{wildcards.sample}_LIFTED.map"),
            shell("cp rawData/{wildcards.sample}.ped Intermediates/COLLATE/{wildcards.sample}_LIFTED.ped"),
            shell("touch Intermediates/LIFTOVER/{wildcards.sample}_EXCLUDE.dat")
            shell("echo '{wildcards.sample}' >> Intermediates/COLLATE/merge_list")


rule ALL_COLLATE:
    """
    Collate Datasets together into 1 psudo-dataset for downstream analysis.
    """
    input:
        expand("Intermediates/COLLATE/{sample}.{extension}", sample=samples, extension=bExtensions),
        merge_list="Intermediates/COLLATE/merge_list"
    
    output:
        expand("Intermediates/COLLATE/ALL.{extension}", extension=bExtensions)

    params:
        prefix = "ALL_PRE_COLLATE",
        prefix2 = "ALL_MERGE",
        prefix3 = "ALL_SUBFILTERED"

    resources:
        cpus=28,
        nodes=1,
        queue="long",
        walltime="30:00:00"

    run:
        shell("module load plink-1.9; plink --keep-allele-order --merge-list {input.merge_list} --make-bed --out ALL")


rule ALL_ANNOTATE:
    """
    Annotate rsID's in psudo-dataset to facilitate down-stream analysis.
    """
    input:
        expand("Intermediates/COLLATE/ALL.{extension}", extension=bExtensions)
        # "Intermediates/FILTER/ALL_{location}_FILTERED.vcf"

    output:
        "Intermediates/ANNOTATE/ALL_ANNOTATED.vcf",
        expand("Intermediates/ANNOTATE/ALL_ANNOTATED.{extension}", extension=bExtensions)
    
    resources:
        cpus=28,
        nodes=1,
        queue="normal",
        walltime="30:00:00"

    shell:
        """
        module load plink-1.9
        plink --bfile Intermediates/COLLATE/ALL --keep-allele-order --recode --out Intermediates/COLLATE/ALL
        module load gatk-4.0.12.0
        gatk VariantAnnotator -V Intermediates/COLLATE/ALL.vcf -R /apps/bcbio/genomes/Hsapiens/hg38/seq/hg38.fa.gz -D /nlustre/data/gatk_resource_bundle/hg38/dbsnp_146.hg38.vcf.gz -O Intermediates/ANNOTATE/ALL_PRE_SED.vcf
        sed -r -e 's/^chr([0-9]{{1,2}})\\t([0-9]+)\\t[0-9]{{1,2}}:[0-9]+[A-Z]{{1}}-[A-Z]{{1}};(rs[0-9]+)/chr\\1\\t\\2\\t\\3/g' Intermediates/ANNOTATE/ALL_PRE_SED.vcf > Intermediates/ANNOTATE/ALL_ANNOTATED.vcf
        cp Intermediates/ANNOTATE/ALL_ANNOTATED.vcf Final/ALL.vcf
        plink --vcf Intermediates/ANNOTATE/ALL_ANOTATED.vcf --keep-allele-order --make-bed --out Intermediates/ANNOTATE/ALL_ANNOTATED
        """


rule Admixture:
    """
    Perform Admixture analysis on the large psudo-dataset (Requires 100 000 minimum variants to distinguish sub-populations and 10 000 to distinguish super-populations.)
    """
    input:
        "Intermediates/ANNOTATE/ALL_ANNOTATED.vcf"

    output:
        "Intermediates/Admixture/ALL.5.Q",
        "Intermediates/Admixture/ALL.5.P"

    params:
        out_name = "Intermediates/Admixture/ALL",
        smartPCA = "Binaries/EIG-7.2.1/bin/"
    
    resources:
        cpus=28,
        nodes=1,
        queue="long",
        walltime="30:00:00"

    shell:
        """
        module load plink-1.9
        module load admixture-1.3.0
        plink --vcf {input} --keep-allele-order --thin-count 200000 --set-missing-var-ids @_# --make-bed --out {Params.out_name}
        admixture {Params.out_name}.bed 5
        """


rule TRIM_AND_NAME:
    """
    Trim the whole-genome psudo-datasets down to several regions of interest for Variant analysis and Variant effect prediction.
    """
    input:
        expand("Intermediates/ANNOTATE/ALL_ANNOTATED.{extension}", extension=bExtensions)

    output:
        expand("Intermediates/TRIM/ALL_{{location}}_READY.{extension}", extension=tExtensions)

    params:
        fromBP = lambda wildcards: config["locations"][wildcards.location]["GRCh37"]["from"],
        toBP = lambda wildcards: config["locations"][wildcards.location]["GRCh37"]["to"],
        chr = lambda wildcards: config["locations"][wildcards.location]["GRCh37"]["chromosome"]
    
    resources:
        cpus=10,
        nodes=1,
        queue="normal",
        walltime="30:00:00"

    shell:
        """
        module load plink-1.9
        module load plink2
        plink --bfile rawData/ALL --chr {params.chr} --set-missing-var-ids @_# --make-bed --keep-allele-order --from-bp {params.fromBP} --to-bp {params.toBP} --out Intermediates/TRIM/ALL_{wildcards.location}_TRIMMED
        plink2 --bfile Intermediates/TRIM/ALL_{wildcards.location}_TRIMMED --set-all-var-ids @:#\$r-\$a --new-id-max-allele-len 40 truncate  --make-bed --out Intermediates/TRIM/ALL_{wildcards.location}_NAMED
        plink --bfile Intermediates/TRIM/ALL_{wildcards.location}_NAMED --keep-allele-order --recode --out Intermediates/TRIM/ALL_{wildcards.location}_READY
        """


rule ALL_FILTER:
    """
    Filter out individuals missing 100% of their variant information (Safety Check).
    """
    input:
        expand("Intermediates/TRIM/ALL_{{location}}_READY.{extension}", extension=tExtensions)

    output:
        "Intermediates/FILTER/ALL_{location}_FILTERED.vcf"
    
    resources:
        cpus=10,
        nodes=1,
        queue="short",
        walltime="03:00:00"

    shell:
        """
        module load plink-1.9
        plink --file Intermediates/COLLATE_{wildcards.location}/ALL_{wildcards.location} --mind 1 --recode vcf-iid --output-chr chr26 --keep-allele-order --out Intermediates/FILTER/ALL_{wildcards.location}_PRE_SED
        sed -r -e 's/##contig=<ID=chr19,length=[0-9]+>/##contig=<ID=chr19,length=58617616>/' -e 's/##contig=<ID=chr4,length=[0-9]+>/##contig=<ID=chr4,length=190214555>/' Intermediates/FILTER/ALL_{wildcards.location}_PRE_SED.vcf > Intermediates/FILTER/ALL_{wildcards.location}_FILTERED.vcf
        """

rule ALL_ANALYZE_SUPER:
    """
    Perform Frequency analysis on super populations.
    """
    input:
        vcf="Intermediates/FILTER/ALL_{location}_FILTERED.vcf",
        popClusters="rawData/superPopCluster"
    
    output:
        expand("Final/SUPER/ALL_{{location}}_SUPER.{extension}", extension=finalExtensions),
        expand("Final/SUPER/{i}/ALL_{{location}}_SUPER_{i}_HV.{extensions}", i=superPop, extensions=["log", "ld"])

    params:
        prefix = 'ALL_{location}_SUPER'
    
    resources:
        cpus=15,
        nodes=1,
        queue="normal",
        walltime="30:00:00"

    run:
        shell("module load plink-1.9; plink --vcf {input.vcf} --keep-allele-order --double-id --freq --out Final/SUPER/{params.prefix}"),
        shell("module load plink-1.9; plink --vcf {input.vcf} --keep-allele-order --double-id --within {input.popClusters} --freq --fst --missing --r2 inter-chr dprime --test-mishap --hardy midp --het --ibc --out Final/SUPER/{params.prefix}"),
        shell("module load plink-1.9; plink --vcf {input.vcf} --keep-allele-order --snps-only --double-id --recode HV --out Final/SUPER/ALL_{wildcards.location}_SUPER_HV"),
        shell("module load plink2; plink2 --vcf {input.vcf} --indep-pairwise 50 10 0.1 --double-id --out Final/SUPER/ALL_SUPER_{wildcards.location}"),
        shell("module load plink2; plink2 --vcf {input.vcf} --double-id --mind --extract Final/SUPER/ALL_SUPER_{wildcards.location}.prune.in --pca var-wts scols=sid --out Final/SUPER/ALL_SUPER_{wildcards.location}")
        for i in superPop:
            shell(f"module load plink-1.9; plink --vcf {input.vcf} --double-id --snps-only --keep-allele-order --within {input.popClusters} --keep-cluster-names {i} --r2 inter-chr dprime --recode HV --out Final/SUPER/{i}/{params.prefix}_{i}_HV");
        # Admixture:
        shell("module load plink-1.9; plink --mind --geno --indep-pairwise 50 10 0.1 --vcf {input.vcf} --double-id --keep-allele-order --make-bed --out Final/SUPER/ALL_{wildcards.location}_SUPER"),
        shell("module load admixture-1.3.0; admixture --cv Final/SUPER/ALL_{wildcards.location}_SUPER.bed 5"),
        shell("mv ALL_{wildcards.location}_SUPER.5.* Final/SUPER/")


rule ALL_ANALYZE_SUB:
    """
    Perform frequency analysis on sub-populations.
    """
    input:
        vcf="Intermediates/FILTER/ALL_{location}_FILTERED.vcf",
        popClusters="rawData/subPopCluster"
        
    output:
        expand("Final/SUB/ALL_{{location}}_SUB.{extension}", extension=finalExtensions),
        expand("Final/SUB/{i}/ALL_{{location}}_SUB_{i}_HV.{extensions}", i=subPop, extensions=["log", "ld"])

    params:
        prefix = 'ALL_{location}_SUB'
    
    resources:
        cpus=15,
        nodes=1,
        queue="normal",
        walltime="30:00:00"
  
    run:
        shell("module load plink-1.9; plink --vcf {input.vcf} --keep-allele-order --double-id --freq --out Final/SUB/{params.prefix}"),
        shell("module load plink-1.9; plink --vcf {input.vcf} --keep-allele-order --double-id --within {input.popClusters} --freq --fst --missing --r2 inter-chr dprime --test-mishap --hardy midp --het --ibc --out Final/SUB/{params.prefix}"),
        shell("module load plink-1.9; plink --vcf {input.vcf} --keep-allele-order --snps-only --double-id --recode HV --out Final/SUB/ALL_{wildcards.location}_SUB_HV")
        for i in subPop:
            shell(f"module load plink-1.9; plink --vcf {input.vcf} --double-id --snps-only --keep-allele-order --within {input.popClusters} --keep-cluster-names {i} --r2 inter-chr dprime --recode HV --out Final/SUB/{i}/{params.prefix}_{i}_HV")

    
#// ToDo: Add in Admixture and in-house VEP processes