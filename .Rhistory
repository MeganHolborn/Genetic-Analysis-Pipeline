fill = Unique),
position = "dodge", alpha = 0.85)+
scale_fill_viridis_d()+
theme(
title = element_text(face = "bold", size = 25),
axis.title.x = element_text(face = "bold", size = 16),
axis.title.y = element_text(face = "bold", size = 16),
axis.text.x = element_blank(),
strip.text = element_text(size = 16),
legend.title = element_text(face = "bold")
)+
geom_point(
data = subset(ALL_1_Alleles, MAF >= 0.04),
mapping = aes(
shape = ClinSig),
alpha = 0.85,
size = 2)+
labs(
title = "CYP2A6 Allele frequency",
fill = "Population\nOverlap",
shape = "Clinicaly\nSignificant",
x = "Variant"
)+
scale_shape_manual(
values = c(17)
)+
scale_y_sqrt()+
scale_x_discrete()+
facet_grid(Population~.)
AllelePlot1
isUniqueAFR2 <- as.data.frame(
shareStatus(
ALL_2_AFR_Frqx$SNP,
ALL_2_AFR_coreAntilap$SNP,
ALL_2_AFR_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_2_AFR_Frqx$SNP, ALL_2_AFR_coreAntilap$SNP, ALL_2_AFR_coreOverlap$SNP)")
isUniqueAMR2 <- as.data.frame(
shareStatus(
ALL_2_AMR_Frqx$SNP,
ALL_2_AMR_coreAntilap$SNP,
ALL_2_AMR_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_2_AMR_Frqx$SNP, ALL_2_AMR_coreAntilap$SNP, ALL_2_AMR_coreOverlap$SNP)")
isUniqueEUR2 <- as.data.frame(
shareStatus(
ALL_2_EUR_Frqx$SNP,
ALL_2_EUR_coreAntilap$SNP,
ALL_2_EUR_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_2_EUR_Frqx$SNP, ALL_2_EUR_coreAntilap$SNP, ALL_2_EUR_coreOverlap$SNP)")
isUniqueEAS2 <- as.data.frame(
shareStatus(
ALL_2_EAS_Frqx$SNP,
ALL_2_EAS_coreAntilap$SNP,
ALL_2_EAS_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_2_EAS_Frqx$SNP, ALL_2_EAS_coreAntilap$SNP, ALL_2_EAS_coreOverlap$SNP)")
isUniqueSAS2 <- as.data.frame(
shareStatus(
ALL_2_SAS_Frqx$SNP,
ALL_2_SAS_coreAntilap$SNP,
ALL_2_SAS_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_2_SAS_Frqx$SNP, ALL_2_SAS_coreAntilap$SNP, ALL_2_SAS_coreOverlap$SNP)")
ALL_2_AFR_Alleles <- ALL_2_AFR_Frqx %>%
cbind(isUniqueAFR2) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "AFR")
ALL_2_AMR_Alleles <- ALL_2_AMR_Frqx %>%
cbind(isUniqueAMR2) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "AMR")
ALL_2_EUR_Alleles <- ALL_2_EUR_Frqx %>%
cbind(isUniqueEUR2) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "EUR")
ALL_2_EAS_Alleles <- ALL_2_EAS_Frqx %>%
cbind(isUniqueEAS2) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "EAS")
ALL_2_SAS_Alleles <- ALL_2_SAS_Frqx %>%
cbind(isUniqueSAS2) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "SAS")
ALL_2_Alleles <- rbind (ALL_2_AFR_Alleles, ALL_2_AMR_Alleles, ALL_2_EUR_Alleles, ALL_2_EAS_Alleles, ALL_2_SAS_Alleles)
ALL_2_Alleles$ClinSig <- clinSig(ALL_2_Alleles$MAF)
AllelePlot2 <- ggplot(
data = ALL_2_Alleles,
mapping = aes(
x = SNP,
y = MAF))+
geom_col(
mapping = aes(
fill = Unique),
position = "dodge", alpha = 0.85)+
scale_fill_viridis_d()+
theme(
title = element_text(face = "bold", size = 25),
axis.title.x = element_text(face = "bold", size = 16),
axis.title.y = element_text(face = "bold", size = 16),
axis.text.x = element_blank(),
strip.text = element_text(size = 16),
legend.title = element_text(face = "bold")
)+
geom_point(
data = subset(ALL_2_Alleles, MAF >= 0.04),
mapping = aes(
shape = ClinSig),
alpha = 0.85,
size = 2)+
labs(
title = "CYP2B6 Allele frequency",
fill = "Population\nOverlap",
shape = "Clinicaly\nSignificant",
x = "Variant"
)+
scale_shape_manual(
values = c(17)
)+
scale_y_sqrt()+
facet_grid(Population~.)
isUniqueAFR3 <- as.data.frame(
shareStatus(
ALL_3_AFR_Frqx$SNP,
ALL_3_AFR_coreAntilap$SNP,
ALL_3_AFR_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_3_AFR_Frqx$SNP, ALL_3_AFR_coreAntilap$SNP, ALL_3_AFR_coreOverlap$SNP)")
isUniqueAMR3 <- as.data.frame(
shareStatus(
ALL_3_AMR_Frqx$SNP,
ALL_3_AMR_coreAntilap$SNP,
ALL_3_AMR_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_3_AMR_Frqx$SNP, ALL_3_AMR_coreAntilap$SNP, ALL_3_AMR_coreOverlap$SNP)")
isUniqueEUR3 <- as.data.frame(
shareStatus(
ALL_3_EUR_Frqx$SNP,
ALL_3_EUR_coreAntilap$SNP,
ALL_3_EUR_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_3_EUR_Frqx$SNP, ALL_3_EUR_coreAntilap$SNP, ALL_3_EUR_coreOverlap$SNP)")
isUniqueEAS3 <- as.data.frame(
shareStatus(
ALL_3_EAS_Frqx$SNP,
ALL_3_EAS_coreAntilap$SNP,
ALL_3_EAS_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_3_EAS_Frqx$SNP, ALL_3_EAS_coreAntilap$SNP, ALL_3_EAS_coreOverlap$SNP)")
isUniqueSAS3 <- as.data.frame(
shareStatus(
ALL_3_SAS_Frqx$SNP,
ALL_3_SAS_coreAntilap$SNP,
ALL_3_SAS_coreOverlap$SNP)) %>%
rename("Unique" = "shareStatus(ALL_3_SAS_Frqx$SNP, ALL_3_SAS_coreAntilap$SNP, ALL_3_SAS_coreOverlap$SNP)")
ALL_3_AFR_Alleles <- ALL_3_AFR_Frqx %>%
cbind(isUniqueAFR3) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "AFR")
ALL_3_AMR_Alleles <- ALL_3_AMR_Frqx %>%
cbind(isUniqueAMR3) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "AMR")
ALL_3_EUR_Alleles <- ALL_3_EUR_Frqx %>%
cbind(isUniqueEUR3) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "EUR")
ALL_3_EAS_Alleles <- ALL_3_EAS_Frqx %>%
cbind(isUniqueEAS3) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "EAS")
ALL_3_SAS_Alleles <- ALL_3_SAS_Frqx %>%
cbind(isUniqueSAS3) %>%
filter(MAF >= 0.01) %>%
mutate(Population = "SAS")
ALL_3_Alleles <- rbind (ALL_3_AFR_Alleles, ALL_3_AMR_Alleles, ALL_3_EUR_Alleles, ALL_3_EAS_Alleles, ALL_3_SAS_Alleles)
ALL_3_Alleles$ClinSig <- clinSig(ALL_3_Alleles$MAF)
AllelePlot3 <- ggplot(
data = ALL_3_Alleles,
mapping = aes(
x = SNP,
y = MAF))+
geom_col(
mapping = aes(
fill = Unique),
position = "dodge", alpha = 0.85)+
scale_fill_viridis_d()+
theme(
title = element_text(face = "bold", size = 25),
axis.title.x = element_text(face = "bold", size = 16),
axis.title.y = element_text(face = "bold", size = 16),
axis.text.x = element_blank(),
strip.text = element_text(size = 16),
legend.title = element_text(face = "bold")
)+
geom_point(
data = subset(ALL_3_Alleles, MAF >= 0.04),
mapping = aes(
shape = ClinSig),
alpha = 0.85,
size = 2)+
labs(
title = "UGT2B7 Allele frequency",
fill = "Population\nOverlap",
shape = "Clinicaly\nSignificant",
x = "Variant"
)+
scale_shape_manual(
values = c(17)
)+
scale_y_sqrt()+
facet_grid(Population~.)
AllelePlot1
AllelePlot2
AllelePlot3
dataSource <- c('e! Ensemble', 'UCSC Genome Browser', 'NCBI Genome Browser')
CYP2A6_START <- c(41349443, 41349443, 41349441)
CYP2A6_STOP <- c(41356352, 41356352, 41356360)
CYP2B6_START <- c(41497204, 41497204, 41497138)
CYP2B6_STOP <- c(41524303, 41524301, 41524308)
UGT2B7_START <- c(69917081, 69962193, 69955190)
UGT2B7_STOP <- c(69978705, 69978705, 69978705)
bp_Pos_Sources <- data.frame(dataSource, CYP2A6_START, CYP2A6_STOP, CYP2B6_START, CYP2B6_STOP, UGT2B7_START, UGT2B7_STOP)
#
# ALL_1_BP <- full_join(ALL_1_SUPER_Frqx, ALL_1_Frqx_Pos, by=c('SNP'='V2')) %>% rename('BP_Position' = 'V1')
# ALL_2_BP <- full_join(ALL_2_SUPER_Frqx, ALL_2_Frqx_Pos, by=c('SNP'='V2')) %>% rename('BP_Position' = 'V1')
# ALL_3_BP <- full_join(ALL_3_SUPER_Frqx, ALL_3_Frqx_Pos, by=c('SNP'='V2')) %>% rename('BP_Position' = 'V1')
#
# ggplot()+
#   geom_violin(
#     data = ALL_1_BP,
#     mapping = aes(
#       x = MAC,
#       y = BP_Position
#       )
#     )+
#   coord_flip()
# ggplot()+
#   geom_violin(
#     data = ALL_2_BP,
#     mapping = aes(
#       x = MAC,
#       y = BP_Position
#       )
#     )+
#   coord_flip()
# ggplot()+
#   geom_violin(
#     data = ALL_3_BP,
#     mapping = aes(
#       x = MAC,
#       y = BP_Position
#       )
#     )+
#   coord_flip()x
ALL_1_Alleles_SUB <- filter(ALL_1_SUB_Frqx, MAF >= 0.01)
ALL_2_Alleles_SUB <- filter(ALL_2_SUB_Frqx, MAF >= 0.01)
ALL_3_Alleles_SUB <- filter(ALL_3_SUB_Frqx, MAF >= 0.01)
c("BAG", "BAN", "BAR", "ETH", "FUL", "GAA", "IGB", "JOL", "KAL", "KIK", "MAN", "SOT", "WOL", "ZUL", "COL", "SOT", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI")
c("GAA", "SOT", "COL", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI")
ALL_1_Conserved <- ALL_1_Alleles_SUB %>% filter(CLST == c("GAA", "SOT", "COL", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI"))
ALL_2_Conserved <- ALL_2_Alleles_SUB %>% filter(CLST == c("BAG", "BAN", "BAR", "ETH", "FUL", "GAA", "IGB", "JOL", "KAL", "KIK", "MAN", "SOT", "WOL", "ZUL", "COL", "SOT", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI"))
ALL_3_Conserved <- ALL_3_Alleles_SUB %>% filter(CLST == c("BAG", "BAN", "BAR", "ETH", "FUL", "GAA", "IGB", "JOL", "KAL", "KIK", "MAN", "SOT", "WOL", "ZUL", "COL", "SOT", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI"))
ALL_1_Unique <- ALL_1_Alleles_SUB %>% filter(CLST == c("GAA", "SOT", "COL", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI"))
ALL_2_Unique <- ALL_2_Alleles_SUB %>% filter(CLST == c("BAG", "BAN", "BAR", "ETH", "FUL", "GAA", "IGB", "JOL", "KAL", "KIK", "MAN", "SOT", "WOL", "ZUL", "COL", "SOT", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI"))
ALL_3_Unique <- ALL_3_Alleles_SUB %>% filter(CLST == c("BAG", "BAN", "BAR", "ETH", "FUL", "GAA", "IGB", "JOL", "KAL", "KIK", "MAN", "SOT", "WOL", "ZUL", "COL", "SOT", "XHO", "ESN", "GWD", "LWK", "MSL", "YRI"))
AllelePlot1_Sub
AFR_1_MAC <- data.frame(ALL_1_AFR_Frqx$SNP, ALL_1_AFR_Frqx$MAC) %>%
rename("SNP_ID" = "ALL_1_AFR_Frqx.SNP") %>%
rename ("AFR" = "ALL_1_AFR_Frqx.MAC") %>%
cbind(ALL_1_AFR_Frqx$NCHROBS) %>%
rename('AFR_COUNT' = 'ALL_1_AFR_Frqx$NCHROBS')
AMR_1_MAC <- data.frame(ALL_1_AMR_Frqx$SNP, ALL_1_AMR_Frqx$MAC) %>%
rename("SNP_ID" = "ALL_1_AMR_Frqx.SNP") %>%
rename ("AMR" = "ALL_1_AMR_Frqx.MAC") %>%
cbind(ALL_1_AMR_Frqx$NCHROBS) %>%
rename('AMR_COUNT' = 'ALL_1_AMR_Frqx$NCHROBS')
EUR_1_MAC <- data.frame(ALL_1_EUR_Frqx$SNP, ALL_1_EUR_Frqx$MAC) %>%
rename("SNP_ID" = "ALL_1_EUR_Frqx.SNP") %>%
rename ("EUR" = "ALL_1_EUR_Frqx.MAC") %>%
cbind(ALL_1_EUR_Frqx$NCHROBS) %>%
rename('EUR_COUNT' = 'ALL_1_EUR_Frqx$NCHROBS')
EAS_1_MAC <- data.frame(ALL_1_EAS_Frqx$SNP, ALL_1_EAS_Frqx$MAC) %>%
rename("SNP_ID" = "ALL_1_EAS_Frqx.SNP") %>%
rename ("EAS" = "ALL_1_EAS_Frqx.MAC") %>%
cbind(ALL_1_EAS_Frqx$NCHROBS) %>%
rename('EAS_COUNT' = 'ALL_1_EAS_Frqx$NCHROBS')
SAS_1_MAC <- data.frame(ALL_1_SAS_Frqx$SNP, ALL_1_SAS_Frqx$MAC) %>%
rename("SNP_ID" = "ALL_1_SAS_Frqx.SNP") %>%
rename ("SAS" = "ALL_1_SAS_Frqx.MAC") %>%
cbind(ALL_1_SAS_Frqx$NCHROBS) %>%
rename('SAS_COUNT' = 'ALL_1_SAS_Frqx$NCHROBS')
# First up, we need to generate our table in the format we want it.
AFR_AMR_1_MAC <- inner_join(AFR_1_MAC, AMR_1_MAC, by='SNP_ID')
AFR_EUR_1_MAC <- inner_join(AFR_1_MAC, EUR_1_MAC, by='SNP_ID')
AFR_EAS_1_MAC <- inner_join(AFR_1_MAC, EAS_1_MAC, by='SNP_ID')
AFR_SAS_1_MAC <- inner_join(AFR_1_MAC, SAS_1_MAC, by='SNP_ID')
# Next, lets define a reusable function to generate a 2x2 matrix and run Fishers-Exact Test on the matrix:
FishersComparison <- function(a,b,c,d){
data <- matrix(c(a,b,c,d),ncol=2)
c(p = fisher.test(data)$p.value,
OR = fisher.test(data)$estimate)
}
#Next, lets apply it to each combination of our dataframe: (Warning, this is going to get repetative)
RunFishers <- function (df, m11, m12, m21, m22){
# Lets generate our column names first:
name1 <- paste0(as.name(m11), "_P_", as.name(m21))
name2 <- paste0(as.name(m11), "_ESTIMATE_", as.name(m21))
df <- df %>% rowwise() %>% mutate(
# Use the !! to force R to evaluate variable to its value:
!!name1 := FishersComparison(
!!as.name(m11),
(!!as.name(m12)-!!as.name(m11)),
!!as.name(m21),
(!!as.name(m22)-!!as.name(m21))
)[[1]],
!!name2 := FishersComparison(
!!as.name(m11),
(!!as.name(m12)-!!as.name(m11)),
!!as.name(m21),
(!!as.name(m22)-!!as.name(m21))
)[[2]]
)
return(df)
}
AFR_AMR_1_MAC <- RunFishers(AFR_AMR_1_MAC, 'AFR', 'AFR_COUNT', 'AMR', 'AMR_COUNT')
AFR_EUR_1_MAC <- RunFishers(AFR_EUR_1_MAC, 'AFR', 'AFR_COUNT', 'EUR', 'EUR_COUNT')
AFR_EAS_1_MAC <- RunFishers(AFR_EAS_1_MAC, 'AFR', 'AFR_COUNT', 'EAS', 'EAS_COUNT')
AFR_SAS_1_MAC <- RunFishers(AFR_SAS_1_MAC, 'AFR', 'AFR_COUNT', 'SAS', 'SAS_COUNT')
#ALL_1_MAC <- ALL_1_MAC %>%
#    rowwise() %>%
#    mutate(
#      AFR_P_AMR=FishersComparison(
#        AFR,
#        (AFR_COUNT-AFR),
#        AMR,
#        (AMR_COUNT-AMR))[[1]],
#      AFR_ESTIMATE_AMR=FishersComparison(
#        AFR,
#        (AFR_COUNT-AFR),
#        AMR,
#      (AMR_COUNT-AMR))[[2]]
#      )
ggplot()+
geom_map(map = map_data("world"))
# First up, we need to generate our table in the format we want it.
AFR_AMR_1_MAC <- inner_join(AFR_1_MAC, AMR_1_MAC, by='SNP_ID')
AFR_EUR_1_MAC <- inner_join(AFR_1_MAC, EUR_1_MAC, by='SNP_ID')
AFR_EAS_1_MAC <- inner_join(AFR_1_MAC, EAS_1_MAC, by='SNP_ID')
AFR_SAS_1_MAC <- inner_join(AFR_1_MAC, SAS_1_MAC, by='SNP_ID')
# Next, lets define a reusable function to generate a 2x2 matrix and run Fishers-Exact Test on the matrix:
FishersComparison <- function(a,b,c,d){
data <- matrix(c(a,b,c,d),ncol=2)
c(p = fisher.test(data)$p.value,
OR = fisher.test(data)$estimate)
}
#Next, lets apply it to each combination of our dataframe: (Warning, this is going to get repetative)
RunFishers <- function (df, m11, m12, m21, m22){
# Lets generate our column names first:
name1 <- paste0(as.name(m11), "_P_", as.name(m21))
name2 <- paste0(as.name(m11), "_ESTIMATE_", as.name(m21))
df <- df %>% rowwise() %>% mutate(
# Use the !! to force R to evaluate variable to its value:
!!name1 := FishersComparison(
!!as.name(m11),
(!!as.name(m12)-!!as.name(m11)),
!!as.name(m21),
(!!as.name(m22)-!!as.name(m21))
)[[1]],
!!name2 := FishersComparison(
!!as.name(m11),
(!!as.name(m12)-!!as.name(m11)),
!!as.name(m21),
(!!as.name(m22)-!!as.name(m21))
)[[2]]
)
return(df)
}
AFR_AMR_1_MAC <- RunFishers(AFR_AMR_1_MAC, 'AFR', 'AFR_COUNT', 'AMR', 'AMR_COUNT')
AFR_EUR_1_MAC <- RunFishers(AFR_EUR_1_MAC, 'AFR', 'AFR_COUNT', 'EUR', 'EUR_COUNT')
AFR_EAS_1_MAC <- RunFishers(AFR_EAS_1_MAC, 'AFR', 'AFR_COUNT', 'EAS', 'EAS_COUNT')
AFR_SAS_1_MAC <- RunFishers(AFR_SAS_1_MAC, 'AFR', 'AFR_COUNT', 'SAS', 'SAS_COUNT')
#ALL_1_MAC <- ALL_1_MAC %>%
#    rowwise() %>%
#    mutate(
#      AFR_P_AMR=FishersComparison(
#        AFR,
#        (AFR_COUNT-AFR),
#        AMR,
#        (AMR_COUNT-AMR))[[1]],
#      AFR_ESTIMATE_AMR=FishersComparison(
#        AFR,
#        (AFR_COUNT-AFR),
#        AMR,
#      (AMR_COUNT-AMR))[[2]]
#      )
View(AFR_AMR_1_MAC)
knitr::opts_chunk$set(echo = TRUE)
# setwd("~/Google Drive/OneDrive - University of Pretoria/University of Pretoria/2020 - Masters/Python-Graphs/")
setwd("F:/GitHub/Pharmacogenetics Snakemake/")
library(tidyverse)
library(xlsx)
knitr::opts_chunk$set(echo = TRUE)
# setwd("~/Google Drive/OneDrive - University of Pretoria/University of Pretoria/2020 - Masters/Python-Graphs/")
setwd("F:/GitHub/Pharmacogenetics Snakemake/")
library(tidyverse)
library(openxlsx)
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheeet="CYP2A6)
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheeet="CYP2A6")
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2A6")
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2A6")
Ford_CYP2A6 <- read.table("../Final/SUPER/ALL_CYP2A6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_CYP2B6 <- read.table("../rawData/Colic.xlsx", sheet="CYP2B6")
Colic_CYP2B6 <- read.table("../rawData/Colic.xlsx", sheet="CYP2B6")
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2A6")
Ford_CYP2A6 <- read.table("../Final/SUPER/ALL_CYP2A6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_CYP2B6 <- read.table("../rawData/Colic.xlsx", sheet="CYP2B6")
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2A6")
Ford_CYP2A6 <- read.table("../Final/SUPER/ALL_CYP2A6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_CYP2B6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2B6")
Ford_CYP2B6 <- read.table("../data/Final/SUPER/ALL_CYP2B6_SUPER.frq.strat", sep = "", header = TRUE)
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2A6")
Ford_CYP2A6 <- read.table("../Final/SUPER/ALL_CYP2A6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_CYP2B6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2B6")
Ford_CYP2B6 <- read.table("../Final/SUPER/ALL_CYP2B6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_UGT2B7 <- read.xlsx("../rawData/Colic.xlsx", sheet="UGT2B7")
Ford_UGT2B7 <- read.table("../Final/SUPER/ALL_UGT2B7_SUPER.frq.strat", sep = "", header = TRUE)
# Step two: We need to make sure everything imported as the correct data-type (Otherwise R will kick up annoying errors):
Colic_CYP2A6$Variant.Identifier <- as.character(Colic_CYP2A6$Variant.Identifier)
Colic_CYP2B6$Variant.Identifier <- as.character(Colic_CYP2B6$Variant.Identifier)
Colic_UGT2B7$Variant.Identifier <- as.character(Colic_UGT2B7$Variant.Identifier)
# Step 3: Now we need to trim down the df to only the columns we need, otherwise they will get in the way
Ford_CYP2A6 <- Ford_CYP2A6 %>% select(SNP, CLST, MAC, NCHROBS)
Ford_CYP2B6 <- Ford_CYP2B6 %>% select(SNP, CLST, MAC, NCHROBS)
Ford_UGT2B7 <- Ford_UGT2B7 %>% select(SNP, CLST, MAC, NCHROBS)
# Step 4: Lets re-format our table to make it directly comparable with Mrs. Colic's:
Ford_1_pre <- Ford_CYP2A6 %>% select(SNP, CLST, MAC) %>% spread(CLST,MAC)
Colic_1 <- Colic_CYP2A6 %>% select(Variant.Identifier, African.vs.European, African.vs.East.Asian)
View(Ford_CYP2A6)
View(Colic_UGT2B7)
knitr::opts_chunk$set(echo = TRUE)
# setwd("~/Google Drive/OneDrive - University of Pretoria/University of Pretoria/2020 - Masters/Python-Graphs/")
setwd("F:/GitHub/Pharmacogenetics Snakemake/")
library(tidyverse)
library(openxlsx)
# Step one: Import Mrs. A. Colic's findings:
Colic_CYP2A6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2A6")
Ford_CYP2A6 <- read.table("../Final/SUPER/ALL_CYP2A6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_CYP2B6 <- read.xlsx("../rawData/Colic.xlsx", sheet="CYP2B6")
Ford_CYP2B6 <- read.table("../Final/SUPER/ALL_CYP2B6_SUPER.frq.strat", sep = "", header = TRUE)
Colic_UGT2B7 <- read.xlsx("../rawData/Colic.xlsx", sheet="UGT2B7")
Ford_UGT2B7 <- read.table("../Final/SUPER/ALL_UGT2B7_SUPER.frq.strat", sep = "", header = TRUE)
# Step two: We need to make sure everything imported as the correct data-type (Otherwise R will kick up annoying errors):
Colic_CYP2A6$Variant.Identifier <- as.character(Colic_CYP2A6$Variant.Identifier)
Colic_CYP2B6$Variant.Identifier <- as.character(Colic_CYP2B6$Variant.Identifier)
Colic_UGT2B7$Variant.Identifier <- as.character(Colic_UGT2B7$Variant.Identifier)
# Step 3: Now we need to trim down the df to only the columns we need, otherwise they will get in the way
Ford_CYP2A6 <- Ford_CYP2A6 %>% select(SNP, CLST, MAC, NCHROBS)
Ford_CYP2B6 <- Ford_CYP2B6 %>% select(SNP, CLST, MAC, NCHROBS)
Ford_UGT2B7 <- Ford_UGT2B7 %>% select(SNP, CLST, MAC, NCHROBS)
# Step 4: Lets re-format our table to make it directly comparable with Mrs. Colic's:
Ford_1_pre <- Ford_CYP2A6 %>% select(SNP, CLST, MAC) %>% spread(CLST,MAC)
View(Ford_CYP2A6)
source('~/.active-rstudio-document', echo=TRUE)
library(tidyverse)
setwd("F:/GitHub/Pharmacogenetics Snakemake/")
tbl=t(as.matrix(read.table("Final/SUPER/ALL_CYP2A6_SUPER.5.Q")))
plotTbl = spread(tbl, )
graph = ggplot(df=tbl, data=rep(aes(fill=c("V1", "V2", "V3", "V4", "V5")))+
graph
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
ggsave("Figures/Admixture_SUPER", dpi=300)
ggsave("Figures/Admixture_SUPER.png", dpi=300)
ggsave("Figures/Admixture_SUPER.png", plot, dpi=300)
ggsave("Figures/Admixture_SUPER.png", plot=plot, dpi=300)
dev.off()
plot = barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
png("Figures/Admixture_SUPER.png", plot=plot, res=300)
plot
dev.off()
png("Figures/Admixture_SUPER.png", plot=plot, res=300)
png("Figures/Admixture_SUPER.png", res=300)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
png("Figures/Admixture_SUPER.png", width = 20, hheight = 10 res=300)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
png("Figures/Admixture_SUPER.png", width = 20, hheight = 10, res=300)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
png("Figures/Admixture_SUPER.png", width = 20, height = 10, res=300)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
png("Figures/Admixture_SUPER.png", width = 10, height = 5, res=300)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
png("Figures/Admixture_SUPER.png", width = 10, height = 5, units = 'in', res=300)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
png("Figures/Admixture_SUPER.png", width = 10, height = 5, units = 'in', res=500)
barplot(tbl, col=rainbow(3),
xlab = "Individual #", ylab = "Ancestry", border=NA)
dev.off()
